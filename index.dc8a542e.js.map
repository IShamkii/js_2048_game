{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nfunction $a5fd07fa01589658$var$generateIndexNewTiles(state, gameStatus) {\n    const indexEmptyCells = [];\n    state.flat().forEach((num, i)=>{\n        if (num === 0) indexEmptyCells.push(i);\n    });\n    if (indexEmptyCells.length === 0) return [];\n    let firstNum;\n    let secondNum;\n    if (gameStatus === \"playing\") {\n        do firstNum = Math.floor(Math.random() * 16);\n        while (!indexEmptyCells.includes(firstNum));\n        return [\n            firstNum\n        ];\n    }\n    do {\n        firstNum = Math.floor(Math.random() * 16);\n        secondNum = Math.floor(Math.random() * 16);\n    }while (!indexEmptyCells.includes(firstNum) || !indexEmptyCells.includes(secondNum) || firstNum === secondNum);\n    return [\n        firstNum,\n        secondNum\n    ];\n}\nfunction $a5fd07fa01589658$var$getNewFlatState(currentState, indexNewTiles) {\n    const newFlatState = [];\n    currentState.flat().forEach((num, i)=>{\n        const valueNewTile = Math.floor(Math.random() * 10) === 0 ? 4 : 2;\n        if (indexNewTiles.includes(i)) newFlatState.push(valueNewTile);\n        else newFlatState.push(num);\n    });\n    return newFlatState;\n}\nfunction $a5fd07fa01589658$export$d428326b0c8ea0f1(flatState) {\n    const cells = [\n        ...document.getElementsByClassName(\"field-cell\")\n    ];\n    cells.forEach((cell, i)=>{\n        cell.textContent = \"\";\n        cell.className = \"field-cell\";\n        if (flatState[i]) {\n            cell.textContent = flatState[i];\n            cell.classList.add(`field-cell--${flatState[i]}`);\n        }\n    });\n}\nfunction $a5fd07fa01589658$var$getTwoDimensionalState(flatState) {\n    const twoDimensionalState = [];\n    let start = 0;\n    for(let i = 1; i <= flatState.length; i++)if (i % 4 === 0) {\n        twoDimensionalState.push(flatState.slice(start, i));\n        start = i;\n    }\n    return twoDimensionalState;\n}\nfunction $a5fd07fa01589658$export$86e2cef2561044ac(key, startValue) {\n    let data = localStorage.getItem(key);\n    if (data === null) data = startValue;\n    try {\n        data = JSON.parse(data);\n    } catch  {\n        localStorage.removeItem(key);\n    }\n    const save = (newValue)=>{\n        localStorage.setItem(key, JSON.stringify(newValue));\n    };\n    return [\n        data,\n        save\n    ];\n}\nclass $a5fd07fa01589658$var$Game {\n    gameStatus = \"idle\";\n    currentState = [];\n    startState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    currentScore = 0;\n    moveLeft() {\n        const newState = this.moveHorizontally(this.currentState);\n        if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) this.getState(newState);\n    }\n    moveRight() {\n        const newState = this.moveHorizontally(this.currentState, true);\n        if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) this.getState(newState);\n    }\n    moveUp() {\n        const newState = this.moveVertically(this.currentState);\n        if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) this.getState(newState);\n    }\n    moveDown() {\n        const newState = this.moveVertically(this.currentState, true);\n        if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) this.getState(newState);\n    }\n    getScore() {\n        const gameScore = [\n            ...document.getElementsByClassName(\"game-score\")\n        ][1];\n        const [, setBestScore] = $a5fd07fa01589658$export$86e2cef2561044ac(\"bestScore\", 0);\n        const [, setCurrentScore] = $a5fd07fa01589658$export$86e2cef2561044ac(\"currentScore\", 0);\n        const bestScore = document.querySelector(\".best\");\n        gameScore.textContent = this.currentScore;\n        setCurrentScore(this.currentScore);\n        if (this.currentScore > bestScore.textContent) {\n            setBestScore(this.currentScore);\n            bestScore.textContent = this.currentScore;\n        }\n    }\n    getState(state) {\n        const indexNewTiles = $a5fd07fa01589658$var$generateIndexNewTiles(state, this.gameStatus);\n        const newFlatState = $a5fd07fa01589658$var$getNewFlatState(state, indexNewTiles);\n        const [, setState] = $a5fd07fa01589658$export$86e2cef2561044ac(\"gameState\", this.startState);\n        this.currentState = $a5fd07fa01589658$var$getTwoDimensionalState(newFlatState);\n        $a5fd07fa01589658$export$d428326b0c8ea0f1(newFlatState);\n        this.getScore();\n        this.searchMoveOpportunity(newFlatState, this.currentState);\n        this.search2048Cell(newFlatState);\n        if (this.gameStatus !== \"lose\" && this.gameStatus !== \"win\") setState(this.currentState);\n    }\n    getStatus() {\n        return this.gameStatus;\n    }\n    start() {\n        this.getState(this.startState);\n        this.gameStatus = \"playing\";\n        const [, setStatus] = $a5fd07fa01589658$export$86e2cef2561044ac(\"gameStatus\", \"playing\");\n        setStatus(\"playing\");\n    }\n    restart() {\n        this.gameStatus = \"idle\";\n        this.currentScore = 0;\n        this.getState(this.startState);\n        localStorage.removeItem(\"currentScore\");\n        this.gameStatus = \"playing\";\n    }\n    // Add your own methods here\n    moveVertically(state, down = false) {\n        const newState = [\n            [],\n            [],\n            [],\n            []\n        ];\n        state.forEach((_, i)=>{\n            const column = Array.from({\n                length: 4\n            }, (__, j)=>state[j][i]);\n            if (down) column.reverse();\n            const itemsInColumn = column.filter((cell)=>cell);\n            if (column.every((cell)=>!cell)) newState.forEach((row)=>row.push(0));\n            if (itemsInColumn.length === 1) {\n                column.sort((a, b)=>b - a);\n                newState.forEach((row, j)=>row.push(column[j]));\n            }\n            if (itemsInColumn.length > 1) {\n                const newCol = this.mergeAdjacentCells(itemsInColumn).filter((cell)=>cell);\n                newState.forEach((row, j)=>row.push(newCol[j] || 0));\n            }\n        });\n        if (down) newState.reverse();\n        return newState;\n    }\n    moveHorizontally(state, right = false) {\n        const newState = [\n            [],\n            [],\n            [],\n            []\n        ];\n        state.forEach((_, i)=>{\n            const row = Array.from({\n                length: 4\n            }, (__, j)=>state[i][j]);\n            if (right) row.reverse();\n            const itemsInRow = row.filter((cell)=>cell);\n            if (row.every((cell)=>!cell)) row.forEach(()=>newState[i].push(0));\n            if (itemsInRow.length === 1) newState[i] = row.sort((a, b)=>b - a);\n            if (itemsInRow.length > 1) {\n                const newRow = this.mergeAdjacentCells(itemsInRow).filter((cell)=>cell);\n                for(let j = 0; j < 4; j++)newState[i].push(newRow[j] || 0);\n            }\n        });\n        if (right) newState.forEach((row)=>row.reverse());\n        return newState;\n    }\n    mergeAdjacentCells(line) {\n        const newLine = Array(4).fill(0);\n        for(let i = 0; i < line.length;)if (line[i] === line[i + 1]) {\n            newLine[i] = line[i] + line[i + 1];\n            this.currentScore += newLine[i];\n            i += 2;\n        } else {\n            newLine[i] = line[i];\n            i++;\n        }\n        return newLine;\n    }\n    searchMoveOpportunity(flatState, state) {\n        if (flatState.every((cell)=>cell)) {\n            let hasEqualCells = false;\n            for(let i = 0; i < state.length; i++){\n                const column = Array.from({\n                    length: 4\n                }, (__, j)=>state[j][i]);\n                const row = Array.from({\n                    length: 4\n                }, (__, j)=>state[i][j]);\n                if (column.some((cell, j)=>j > 0 && cell === column[j - 1]) || row.some((cell, j)=>j > 0 && cell === row[j - 1])) hasEqualCells = true;\n            }\n            if (!hasEqualCells) {\n                this.gameStatus = \"lose\";\n                localStorage.removeItem(\"gameStatus\");\n                localStorage.removeItem(\"gameState\");\n            }\n        }\n    }\n    search2048Cell(flatState) {\n        flatState.forEach((cell)=>{\n            if (cell === 2048) {\n                this.gameStatus = \"win\";\n                localStorage.removeItem(\"gameStatus\");\n                localStorage.removeItem(\"gameState\");\n            }\n        });\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\n// Write your code here\nconst $09e991522ca7e64e$var$startRestart = document.getElementsByClassName(\"button\")[0];\nconst $09e991522ca7e64e$var$message = document.getElementsByClassName(\"message\");\nconst $09e991522ca7e64e$var$bestScore = document.querySelector(\".best\");\nconst $09e991522ca7e64e$var$currentScoreTile = [\n    ...document.getElementsByClassName(\"game-score\")\n][1];\nconst [$09e991522ca7e64e$var$score] = (0, $a5fd07fa01589658$export$86e2cef2561044ac)(\"bestScore\", 0);\nconst [$09e991522ca7e64e$var$currentScore] = (0, $a5fd07fa01589658$export$86e2cef2561044ac)(\"currentScore\", 0);\nconst [$09e991522ca7e64e$var$state] = (0, $a5fd07fa01589658$export$86e2cef2561044ac)(\"gameState\", $09e991522ca7e64e$var$game.startState);\nconst [$09e991522ca7e64e$var$gameStatus] = (0, $a5fd07fa01589658$export$86e2cef2561044ac)(\"gameStatus\", \"idle\");\nif ($09e991522ca7e64e$var$gameStatus === \"playing\") {\n    $09e991522ca7e64e$var$game.currentState = $09e991522ca7e64e$var$state;\n    $09e991522ca7e64e$var$game.currentScore = $09e991522ca7e64e$var$currentScore;\n    $09e991522ca7e64e$var$currentScoreTile.textContent = $09e991522ca7e64e$var$currentScore;\n    (0, $a5fd07fa01589658$export$d428326b0c8ea0f1)($09e991522ca7e64e$var$state.flat());\n    $09e991522ca7e64e$var$game.gameStatus = $09e991522ca7e64e$var$gameStatus;\n    $09e991522ca7e64e$var$startRestart.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startRestart.classList.add(\"restart\");\n    $09e991522ca7e64e$var$startRestart.textContent = \"Restart\";\n    $09e991522ca7e64e$var$message[2].classList.toggle(\"hidden\");\n}\n$09e991522ca7e64e$var$bestScore.textContent = $09e991522ca7e64e$var$score;\n$09e991522ca7e64e$var$startRestart.onclick = ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$startRestart.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startRestart.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startRestart.textContent = \"Restart\";\n        $09e991522ca7e64e$var$message[2].classList.toggle(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") $09e991522ca7e64e$var$game.restart();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\" || $09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        const messageIndex = $09e991522ca7e64e$var$game.getStatus() === \"lose\" ? 0 : 1;\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$message[messageIndex].classList.toggle(\"hidden\");\n    }\n};\nconst $09e991522ca7e64e$var$keydownHandler = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") return;\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        default:\n            break;\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\" || $09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        const messageIndex = $09e991522ca7e64e$var$game.getStatus() === \"lose\" ? 0 : 1;\n        $09e991522ca7e64e$var$message[messageIndex].classList.toggle(\"hidden\");\n        removeEventListener(\"keydown\", $09e991522ca7e64e$var$keydownHandler);\n    }\n};\naddEventListener(\"keydown\", $09e991522ca7e64e$var$keydownHandler);\nlet $09e991522ca7e64e$var$touchStartX = null;\nlet $09e991522ca7e64e$var$touchStartY = null;\nconst $09e991522ca7e64e$var$touchStartHandler = (e)=>{\n    $09e991522ca7e64e$var$touchStartX = e.touches[0].clientX;\n    $09e991522ca7e64e$var$touchStartY = e.touches[0].clientY;\n};\nconst $09e991522ca7e64e$var$touchEndHandler = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") return;\n    const touchEndX = e.changedTouches[0].clientX;\n    const touchEndY = e.changedTouches[0].clientY;\n    const deltaX = touchEndX - $09e991522ca7e64e$var$touchStartX;\n    const deltaY = touchEndY - $09e991522ca7e64e$var$touchStartY;\n    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {\n        if (deltaX > 0) $09e991522ca7e64e$var$game.moveRight();\n        else $09e991522ca7e64e$var$game.moveLeft();\n    } else if (Math.abs(deltaY) > 50) {\n        if (deltaY > 0) $09e991522ca7e64e$var$game.moveDown();\n        else $09e991522ca7e64e$var$game.moveUp();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\" || $09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        const messageIndex = $09e991522ca7e64e$var$game.getStatus() === \"lose\" ? 0 : 1;\n        $09e991522ca7e64e$var$message[messageIndex].classList.toggle(\"hidden\");\n        removeEventListener(\"touchstart\", $09e991522ca7e64e$var$touchStartHandler);\n        removeEventListener(\"touchend\", $09e991522ca7e64e$var$touchEndHandler);\n    }\n};\naddEventListener(\"touchstart\", $09e991522ca7e64e$var$touchStartHandler);\naddEventListener(\"touchend\", $09e991522ca7e64e$var$touchEndHandler);\n\n\n//# sourceMappingURL=index.dc8a542e.js.map\n","'use strict';\n\nimport Game, { setCells, useLocalStorage } from '../modules/Game.class';\n\nconst game = new Game();\n\n// Write your code here\nconst startRestart = document.getElementsByClassName('button')[0];\nconst message = document.getElementsByClassName('message');\nconst bestScore = document.querySelector('.best');\nconst currentScoreTile = [...document.getElementsByClassName('game-score')][1];\n\nconst [score] = useLocalStorage('bestScore', 0);\nconst [currentScore] = useLocalStorage('currentScore', 0);\nconst [state] = useLocalStorage('gameState', game.startState);\nconst [gameStatus] = useLocalStorage('gameStatus', 'idle');\n\nif (gameStatus === 'playing') {\n  game.currentState = state;\n  game.currentScore = currentScore;\n  currentScoreTile.textContent = currentScore;\n  setCells(state.flat());\n  game.gameStatus = gameStatus;\n\n  startRestart.classList.remove('start');\n  startRestart.classList.add('restart');\n\n  startRestart.textContent = 'Restart';\n\n  message[2].classList.toggle('hidden');\n}\n\nbestScore.textContent = score;\n\nstartRestart.onclick = () => {\n  if (game.getStatus() === 'idle') {\n    startRestart.classList.remove('start');\n    startRestart.classList.add('restart');\n\n    startRestart.textContent = 'Restart';\n\n    message[2].classList.toggle('hidden');\n\n    game.start();\n  }\n\n  if (game.getStatus() === 'playing') {\n    game.restart();\n  }\n\n  if (game.getStatus() === 'lose' || game.getStatus() === 'win') {\n    const messageIndex = game.getStatus() === 'lose' ? 0 : 1;\n\n    game.restart();\n    message[messageIndex].classList.toggle('hidden');\n  }\n};\n\nconst keydownHandler = (e) => {\n  if (game.getStatus() === 'idle') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    default:\n      break;\n  }\n\n  if (game.getStatus() === 'lose' || game.getStatus() === 'win') {\n    const messageIndex = game.getStatus() === 'lose' ? 0 : 1;\n\n    message[messageIndex].classList.toggle('hidden');\n    removeEventListener('keydown', keydownHandler);\n  }\n};\n\naddEventListener('keydown', keydownHandler);\n\nlet touchStartX = null;\nlet touchStartY = null;\n\nconst touchStartHandler = (e) => {\n  touchStartX = e.touches[0].clientX;\n  touchStartY = e.touches[0].clientY;\n};\n\nconst touchEndHandler = (e) => {\n  if (game.getStatus() === 'idle') {\n    return;\n  }\n\n  const touchEndX = e.changedTouches[0].clientX;\n  const touchEndY = e.changedTouches[0].clientY;\n\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {\n    if (deltaX > 0) {\n      game.moveRight();\n    } else {\n      game.moveLeft();\n    }\n  } else if (Math.abs(deltaY) > 50) {\n    if (deltaY > 0) {\n      game.moveDown();\n    } else {\n      game.moveUp();\n    }\n  }\n\n  if (game.getStatus() === 'lose' || game.getStatus() === 'win') {\n    const messageIndex = game.getStatus() === 'lose' ? 0 : 1;\n\n    message[messageIndex].classList.toggle('hidden');\n    removeEventListener('touchstart', touchStartHandler);\n    removeEventListener('touchend', touchEndHandler);\n  }\n};\n\naddEventListener('touchstart', touchStartHandler);\naddEventListener('touchend', touchEndHandler);\n","'use strict';\n\nfunction generateIndexNewTiles(state, gameStatus) {\n  const indexEmptyCells = [];\n\n  state.flat().forEach((num, i) => {\n    if (num === 0) {\n      indexEmptyCells.push(i);\n    }\n  });\n\n  if (indexEmptyCells.length === 0) {\n    return [];\n  }\n\n  let firstNum;\n  let secondNum;\n\n  if (gameStatus === 'playing') {\n    do {\n      firstNum = Math.floor(Math.random() * 16);\n    } while (!indexEmptyCells.includes(firstNum));\n\n    return [firstNum];\n  }\n\n  do {\n    firstNum = Math.floor(Math.random() * 16);\n    secondNum = Math.floor(Math.random() * 16);\n  } while (\n    !indexEmptyCells.includes(firstNum) ||\n    !indexEmptyCells.includes(secondNum) ||\n    firstNum === secondNum\n  );\n\n  return [firstNum, secondNum];\n}\n\nfunction getNewFlatState(currentState, indexNewTiles) {\n  const newFlatState = [];\n\n  currentState.flat().forEach((num, i) => {\n    const valueNewTile = Math.floor(Math.random() * 10) === 0 ? 4 : 2;\n\n    if (indexNewTiles.includes(i)) {\n      newFlatState.push(valueNewTile);\n    } else {\n      newFlatState.push(num);\n    }\n  });\n\n  return newFlatState;\n}\n\nexport function setCells(flatState) {\n  const cells = [...document.getElementsByClassName('field-cell')];\n\n  cells.forEach((cell, i) => {\n    cell.textContent = '';\n    cell.className = 'field-cell';\n\n    if (flatState[i]) {\n      cell.textContent = flatState[i];\n      cell.classList.add(`field-cell--${flatState[i]}`);\n    }\n  });\n}\n\nfunction getTwoDimensionalState(flatState) {\n  const twoDimensionalState = [];\n  let start = 0;\n\n  for (let i = 1; i <= flatState.length; i++) {\n    if (i % 4 === 0) {\n      twoDimensionalState.push(flatState.slice(start, i));\n      start = i;\n    }\n  }\n\n  return twoDimensionalState;\n}\n\nexport function useLocalStorage(key, startValue) {\n  let data = localStorage.getItem(key);\n\n  if (data === null) {\n    data = startValue;\n  }\n\n  try {\n    data = JSON.parse(data);\n  } catch {\n    localStorage.removeItem(key);\n  }\n\n  const save = (newValue) => {\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [data, save];\n}\n\nclass Game {\n  gameStatus = 'idle';\n  currentState = [];\n  startState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  currentScore = 0;\n\n  moveLeft() {\n    const newState = this.moveHorizontally(this.currentState);\n\n    if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) {\n      this.getState(newState);\n    }\n  }\n\n  moveRight() {\n    const newState = this.moveHorizontally(this.currentState, true);\n\n    if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) {\n      this.getState(newState);\n    }\n  }\n\n  moveUp() {\n    const newState = this.moveVertically(this.currentState);\n\n    if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) {\n      this.getState(newState);\n    }\n  }\n\n  moveDown() {\n    const newState = this.moveVertically(this.currentState, true);\n\n    if (JSON.stringify(this.currentState) !== JSON.stringify(newState)) {\n      this.getState(newState);\n    }\n  }\n\n  getScore() {\n    const gameScore = [...document.getElementsByClassName('game-score')][1];\n    const [, setBestScore] = useLocalStorage('bestScore', 0);\n    const [, setCurrentScore] = useLocalStorage('currentScore', 0);\n    const bestScore = document.querySelector('.best');\n\n    gameScore.textContent = this.currentScore;\n    setCurrentScore(this.currentScore);\n\n    if (this.currentScore > bestScore.textContent) {\n      setBestScore(this.currentScore);\n      bestScore.textContent = this.currentScore;\n    }\n  }\n\n  getState(state) {\n    const indexNewTiles = generateIndexNewTiles(state, this.gameStatus);\n    const newFlatState = getNewFlatState(state, indexNewTiles);\n    const [, setState] = useLocalStorage('gameState', this.startState);\n\n    this.currentState = getTwoDimensionalState(newFlatState);\n    setCells(newFlatState);\n    this.getScore();\n    this.searchMoveOpportunity(newFlatState, this.currentState);\n    this.search2048Cell(newFlatState);\n\n    if (this.gameStatus !== 'lose' && this.gameStatus !== 'win') {\n      setState(this.currentState);\n    }\n  }\n\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start() {\n    this.getState(this.startState);\n    this.gameStatus = 'playing';\n\n    const [, setStatus] = useLocalStorage('gameStatus', 'playing');\n\n    setStatus('playing');\n  }\n\n  restart() {\n    this.gameStatus = 'idle';\n    this.currentScore = 0;\n    this.getState(this.startState);\n    localStorage.removeItem('currentScore');\n    this.gameStatus = 'playing';\n  }\n\n  // Add your own methods here\n  moveVertically(state, down = false) {\n    const newState = [[], [], [], []];\n\n    state.forEach((_, i) => {\n      const column = Array.from({ length: 4 }, (__, j) => state[j][i]);\n\n      if (down) {\n        column.reverse();\n      }\n\n      const itemsInColumn = column.filter((cell) => cell);\n\n      if (column.every((cell) => !cell)) {\n        newState.forEach((row) => row.push(0));\n      }\n\n      if (itemsInColumn.length === 1) {\n        column.sort((a, b) => b - a);\n        newState.forEach((row, j) => row.push(column[j]));\n      }\n\n      if (itemsInColumn.length > 1) {\n        const newCol = this.mergeAdjacentCells(itemsInColumn).filter(\n          (cell) => cell,\n        );\n\n        newState.forEach((row, j) => row.push(newCol[j] || 0));\n      }\n    });\n\n    if (down) {\n      newState.reverse();\n    }\n\n    return newState;\n  }\n\n  moveHorizontally(state, right = false) {\n    const newState = [[], [], [], []];\n\n    state.forEach((_, i) => {\n      const row = Array.from({ length: 4 }, (__, j) => state[i][j]);\n\n      if (right) {\n        row.reverse();\n      }\n\n      const itemsInRow = row.filter((cell) => cell);\n\n      if (row.every((cell) => !cell)) {\n        row.forEach(() => newState[i].push(0));\n      }\n\n      if (itemsInRow.length === 1) {\n        newState[i] = row.sort((a, b) => b - a);\n      }\n\n      if (itemsInRow.length > 1) {\n        const newRow = this.mergeAdjacentCells(itemsInRow).filter(\n          (cell) => cell,\n        );\n\n        for (let j = 0; j < 4; j++) {\n          newState[i].push(newRow[j] || 0);\n        }\n      }\n    });\n\n    if (right) {\n      newState.forEach((row) => row.reverse());\n    }\n\n    return newState;\n  }\n\n  mergeAdjacentCells(line) {\n    const newLine = Array(4).fill(0);\n\n    for (let i = 0; i < line.length; ) {\n      if (line[i] === line[i + 1]) {\n        newLine[i] = line[i] + line[i + 1];\n        this.currentScore += newLine[i];\n        i += 2;\n      } else {\n        newLine[i] = line[i];\n        i++;\n      }\n    }\n\n    return newLine;\n  }\n\n  searchMoveOpportunity(flatState, state) {\n    if (flatState.every((cell) => cell)) {\n      let hasEqualCells = false;\n\n      for (let i = 0; i < state.length; i++) {\n        const column = Array.from({ length: 4 }, (__, j) => state[j][i]);\n        const row = Array.from({ length: 4 }, (__, j) => state[i][j]);\n\n        if (\n          column.some((cell, j) => j > 0 && cell === column[j - 1]) ||\n          row.some((cell, j) => j > 0 && cell === row[j - 1])\n        ) {\n          hasEqualCells = true;\n        }\n      }\n\n      if (!hasEqualCells) {\n        this.gameStatus = 'lose';\n\n        localStorage.removeItem('gameStatus');\n        localStorage.removeItem('gameState');\n      }\n    }\n  }\n\n  search2048Cell(flatState) {\n    flatState.forEach((cell) => {\n      if (cell === 2048) {\n        this.gameStatus = 'win';\n\n        localStorage.removeItem('gameStatus');\n        localStorage.removeItem('gameState');\n      }\n    });\n  }\n}\n\nexport default Game;\n"],"names":["$a5fd07fa01589658$export$d428326b0c8ea0f1","flatState","cells","document","getElementsByClassName","forEach","cell","i","textContent","className","classList","add","$a5fd07fa01589658$export$86e2cef2561044ac","key","startValue","data","localStorage","getItem","JSON","parse","removeItem","newValue","setItem","stringify","$09e991522ca7e64e$var$game","gameStatus","currentState","startState","currentScore","moveLeft","newState","moveHorizontally","getState","moveRight","moveUp","moveVertically","moveDown","getScore","gameScore","setBestScore","setCurrentScore","bestScore","querySelector","state","indexNewTiles","$a5fd07fa01589658$var$generateIndexNewTiles","firstNum","secondNum","indexEmptyCells","flat","num","push","length","Math","floor","random","includes","newFlatState","$a5fd07fa01589658$var$getNewFlatState","valueNewTile","setState","$a5fd07fa01589658$var$getTwoDimensionalState","twoDimensionalState","start","slice","searchMoveOpportunity","search2048Cell","getStatus","setStatus","restart","down","_","column","Array","from","__","j","reverse","itemsInColumn","filter","every","row","sort","a","b","newCol","mergeAdjacentCells","right","itemsInRow","newRow","line","newLine","fill","hasEqualCells","some","$09e991522ca7e64e$var$startRestart","$09e991522ca7e64e$var$message","$09e991522ca7e64e$var$bestScore","$09e991522ca7e64e$var$currentScoreTile","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$currentScore","$09e991522ca7e64e$var$state","$09e991522ca7e64e$var$gameStatus","remove","toggle","onclick","messageIndex","$09e991522ca7e64e$var$keydownHandler","e","removeEventListener","addEventListener","$09e991522ca7e64e$var$touchStartX","$09e991522ca7e64e$var$touchStartY","$09e991522ca7e64e$var$touchStartHandler","touches","clientX","clientY","$09e991522ca7e64e$var$touchEndHandler","touchEndX","changedTouches","touchEndY","deltaX","deltaY","abs"],"version":3,"file":"index.dc8a542e.js.map"}